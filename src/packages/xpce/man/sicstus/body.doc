\chapter{Introduction}

XPCE is an efficient object-oriented system that can neatly be
intergrated with and extended in dynamically typed languages. For
historical reasons, Prolog is the main focus for XPCE.

XPCE has a long history and has been connected to many Prolog
environments. Currently it is available for
\url[SWI-Prolog]{http://www.swi.psy.uva.nl/projects/SWI-Prolog/},
\url[Quintus Prolog]{http://www.sics.se/quintus/} and now for
\url[SICStus Prolog]{http://www.sics.se/isl/sicstus.html}. These Prolog
implementations are closely related, notably in their module systems. In
addition, neither of these Prolog systems provide built-in support for
graphics, making them natural partners for XPCE.


\section{\product}

With \product{} we refer to the joined system consisting of XPCE,
SICStus Prolog and the interface between these two systems.  The
interface is a foreign language extension for SICStus Prolog that
encapsulates the raw functionality of XPCE, making it appear natural
to the Prolog user.  In addition, \product{} consists of Prolog files
that define the common ground for the \productpl{} libraries.

To SICStus Prolog, XPCE is simply a library, which is loaded into
the Prolog system using:

\begin{code}
:- use_module(library(pce)).
\end{code}

The XPCE library is prepared to deal with the SICStus saved-state
model, which can be used to create a combined executable.


\section{Further Information}

The \url[XPCE Home Page]{http://www.swi.psy.uva.nl/projects/xpce/}
provides additional information about XPCE, including motivation,
highlights, pointers to documentation, mailing list, etc.


\section{Status}

The current release of \productpl{} is an {\em alpha} release, notably for
testing the basic interface and port of the Prolog libraries.  The
kernel is identical for all versions and should therefore be considered
stable.

The current version only runs on Unix platforms for which SICStus Prolog
provides a shared-object interface.  These include SunOS 4.x, Solaris 2.x,
Irix, Linux and SCO-Unix.  The current implementation has been developed
and tested using \url[SuSE Linux]{http://www.suse.com}.


\chapter{Test programme}

This is the first {\em alpha} release of XPCE for SICStus Prolog. It
is distributed as binary for Solaris 2.x and Linux based on glibc
(aka libc 6.0).

Licenced users of XPCE sources may join this test program using the
source distribution.

To join the test programme, please send an E-mail to
\email{xpce-info@swi.psy.uva.nl}.  Please indicate which version(s):
Linux binary, Solaris binary or source.

In the test programme, we want to evaluate the following

\begin{itemlist}
    \item [Technical functioning of XPCE/SICStus]
This includes bugs (crashes, unsolicitated error messages and
other wrong behaviour), performance and installation.
    \item [It would be nice if \ldots]
Suggestions to us for additional minor and key functionality.
    \item [Positioning of XPCE for SICStus]
How do you preceive XPCE for SICStus?  For what kind of job will
you use it?  For what kind of job would you use it if \ldots?
\end{itemlist}

Please E-mail your suggestions to \email{xpce-info@swi.psy.uva.nl}


\chapter{Installation}

\section{Installation the binary}

\product{} for SICStus is distributed in two formats. The binary format
is a `gzipped tar'-file containing the library for the platform of
choice. Installation implies unpacking the archive using

\begin{code}
% gunzip < xpce-sicstus-<arch>.tar.gz | tar xf -
\end{code}

After unpacking, please continue as described in \chapref{using}.

\section{Installation from the source}

Installation of the source requires the following components installed
on your Unix machine:

\begin{itemlist}
    \item [{\url[SICStus Prolog]{http://www.sics.se/isl/sicstus.html}}]
The interface has been tested with \sicsversion.  Building the interface
does not require the SICStus Prolog sources.
    \item [{\url[XPCE]{http://www.swi.psy.uva.nl/projects/xpce/}}]
Sources of the XPCE library.  The interface has been tested using
version \xpceversion.
    \item [{\url[\program{gcc}]{ftp://prep.ai.mit.edu/pub/gnu/GNUinfo/FTP}}]
On most Unix platforms compilation of XPCE is best supported using the
GNU-C compiler.  Other conforming ANSI compliant compilers may do as
well, but are likely to require some fidling with the \file{Makefile}'s,
especially for creating shared objects.
    \item [{\url[\program{make}]{ftp://prep.ai.mit.edu/pub/gnu/GNUinfo/FTP}}]
XPCE compilation only works if you have GNU-make installed. All not
completely ancient versions of GNU-make suffice.
    \item [{\url[Xpm library]{http://www.inria.fr/koala/lehors/xpm.html}}]
The Xpm library is required for recent versions of XPCE to deal with
the \fileext{XPM} icon format.  Parts of the system rely on this.  XPCE
has been tested using version 3.4k of this library.
    \item [{\url[jpeg library]{http://www.ijg.org}}]
The jpeg library from the independent jpeg group is used to deal with
\fileext{JPEG} image data. XPCE has been tested using version 6a of this
library.
\end{itemlist}

\subsection{Configuration}

The \product{} are set up to be compiled for multiple platforms.  To
create a configuration, first create a directory under the main
\product{} source directory.  Say \file{solaris} to build
a Solaris version.  Change to this directory and run:

\begin{code}
% ../src/configure [options]
\end{code}

Configure is generated using the generic GNU autoconf package,
programmed to deal with many \product{} specific problems. Commonly used
options are:

\begin{description}
    \longoptionitem{help}{}
Display all available options.
    \longoptionitem{prefix}{directory}
Use \arg{directory} as base for the installation. Binaries are installed
in \file{directory/bin}, libraries in \file{directory/lib}
and manual pages in \file{directory/man}
    \longoptionitem{exec_prefix}{directory}
Changes the directory for binaries to \arg{directory}
    \longoptionitem{x-includes}{directory}
Specifies the include files for the X11 libraries. Normally
\program{configure} will find them for you, but if they are at an
uncommon place or you have multiple versions of X11 around, this
option can be handy.
    \longoptionitem{x-libraries}{directory}
As \longoption{x-includes}{}, but specifies the location of the
libraries itself. If you specify \longoption{x-includes}{}, you should
normally specify this option too.
    \longoptionitem{with-xpm}{directory}
If the local Xpm libraries are installed elsewere, look in
\file{directory/include} and \file{directory/lib}
\end{description}


\subsection{Building}

After configuration, the base library is built using

\begin{code}
% make
\end{code}

If no errors are encountered, this will generate \file{libXPCE.a}.
Next, change directory to \file{$PCEHOME/sicstus/src}. Edit
\file{Makefile}, notably \const{PCEHOME}, which reflects the base
directory for installing the XPCE library.  Now run

\begin{code}
% make
\end{code}

To build \file{pce.so} and copy the library to \env{PCEHOME}.  You
can now test the library locally using the XPCE manual tools
and demo programs.  To start these, use:

\begin{code}
% sicstus
?- [load].
?- manpce.
\end{code}

If all is right, the little window shown in \figref{manpce} appears at
the top of your screen.

\postscriptfig{manpce}{The XPCE Manual toplevel window}

Now, try ---for example--- the {\em File/About} menu-entry, the
{\em Browsers/Class hierarchy} and/or {\em File/Demo programs}
(for example the {\em PceDraw} demo).

If no warnings are displayed and all appears to function correctly,
please proceed with the \secref{ql}.

\subsubsection{Installing the library}

Using the command below, the library is installed into the Makefile
variable \env{PCEHOME}, which is by default set to \file{$SP_PATH/xpce}.
Edit Makefile if a different location is preferred.

\begin{code}
% make install-lib
\end{code}

\subsubsection{Compiling \fileext{ql} files}		\label{sec:ql}

It is adviced to compile the Prolog source into SICStus \fileext{ql}
files, which load quicker and make the setting of the
\const{character_escapes} prolog flag irrevevant.%
	\footnote{Part of the XPCE/Prolog libraries assume
		  \const{character_escapes} to be \const{off} and
		  produce syntax-errors and/or incorrect results if
		  \const{character_escapes} are active.}

To build \fileext{ql} files for all library components use the
command

\begin{code}
% make ql
\end{code}


\chapter{Using \product{} with SICStus Prolog} \label{sec:using}

There are two ways to link \product{} to SICStus Prolog.  First is to
use it as a normal library on top of SICStus. This is simple, but unless
you have a very fast machine and do not care about the loading messages
we recomment to use the second mechanism based on a SICStus Prolog
saved-state.


\section{Adding the XPCE library to SICStus}	\label{sec:addlib}

Using the default installation in \file{$SP_PATH/xpce}, this implies
adding the following rules to your \file{~/.sicstusrc}:

\begin{code}
:- multifile
	library_directory/1.
:- dynamic
	library_directory/1.

library_directory('$SP_PATH/xpce/prolog/lib').
\end{code}

After this, files can use the functionality of \product{} by including
\pllib{pce}:

\begin{code}
:- use_module(library(pce)).
\end{code}

This library can also be loaded into the Prolog toplevel to make
\product{}'s commands available to the toplevel.  For \productpl{}
interactive development we recomment to enable SICStus autoloading
by adding the following rules to \file{~/.sicstusrc}

\begin{code}
user:unknown_predicate_handler(Goal, Module, Goal) :-
        functor(Goal, Name, Arity),
        require(Module:(Name/Arity)).
\end{code}


\section{Creating a saved-state}

The XPCE library is fully compliant with the SICStus Prolog
saved-state model.  To develop applications that employ XPCE
and possibly other large SICStus Prolog libraries we recomment to
create a saved-state containing these base libraries.

The installation procedure contains \file{mkxpce.pl} and corresponding
rules in the local \file{Makefile} to create a saved-state called
\program{xpce}.  

\begin{itemize}
    \item goto the installation directory of the library.  Using default
          setup, this is \file{$SP_PATH/xpce}.
    \item edit \file{mkxpce.pl}
    \item run
\begin{quote}
    \verb$% sicstus -l mkxpce.pl -a$ <xpcelibdir> <executable>
\end{quote}

For example:
\begin{code}
% sicstus -l mkxpce.pl \
	-a /usr/local/lib/sicstus-3.7.1/xpce/prolog/lib xpce
\end{code}
    \item copy <executable> to a public place.
\end{itemize}


\chapter{Issues \& Limitations}

The current port supports almost all features required for applications.
The version of SICStus Prolog (3.7.1) used for \productpl{} however
lacks a few features that disables some of \productpl{} power. These
notable affect the environment for program {\em development}. SICS
recognises the values of these features.

\begin{itemize}
    \item The predicate read_term/3 lacks the option
          \term{subterm_positions}{}.  This disables \program{PceEmacs}
	  doing on-the-fly syntax checking and reporting singleton
	  variables.
    \item SICStus user-defined strings are not `seekable',  This limits
          the possibilities of using normal Prolog I/O to \product{}
	  text objects.  The code below---for example---reads a Prolog
	  term from the current line of a \product{} \class{editor}
	  object.
\begin{code}
	...,
	pce_open(Editor, read, Fd),
	get(Editor, caret, Caret),
	get(Editor, scan, Caret, line, 0, start, StartOfLine),
	seek(Fd, StartOfLine, bof, _),
	read(Fd, Term),
	close(Fd),
	...
\end{code}
    \item SICStus does not know about reusing bindings of variables
          produced by interactive queries in new queries.  This feature
	  is handy during \productpl{} development and debugging.
	  Below is a typical example to verify the status of some
	  objects.  The first reference is obtainted using the
	  {\em Visual Hiearchy} tool.
\begin{code}
?- get(@539267, member, bitmap, BM).

BM = @554436/bitmap 
yes
?- get($BM, file, F).

F = @544056/resource
yes
?- show_slots($F).
@544056/resource
        name                  builtin_class
        class                 @default/constant
        context               man_class_hierarchy
\end{code}
    \item SICStus lacks a facility to update all changed source-files
          after doing some editing in various distributed and loaded
	  files.
    \item SICStus lacks extensible edit, listing and spypoint interface,
          forcing the use of special {\tt pce...} predicates to deal
	  with \productpl{} primitives.
    \item Source-level tracer interface.  For SWI-Prolog, a rather
          low-level interface to the tracer has been defined that allows
	  for redefining the Prolog debugger UI in Prolog with access to
	  detailed information on bindings, choice-points, etc.  It is
	  unclear if and when something similar will be realised for
	  SICStus Prolog.
\end{itemize}
