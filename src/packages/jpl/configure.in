dnl Process this file with autoconf to produce a configure script.

AC_INIT(install-sh)
AC_PREREQ([2.50])
AC_CONFIG_HEADER(config.h)

AC_SUBST(PL)
AC_SUBST(PLLIBS)
AC_SUBST(PLBASE)
AC_SUBST(PLARCH)
AC_SUBST(PLINCL)
AC_SUBST(COFLAGS)
AC_SUBST(CWFLAGS)
AC_SUBST(CMFLAGS)
AC_SUBST(CIFLAGS)
AC_SUBST(ETAGS)
AC_SUBST(LD)
AC_SUBST(SO)
AC_SUBST(LDSOFLAGS)
AC_SUBST(JAVA_HOME)
AC_SUBST(JAVALIBS)
AC_SUBST(JUNIT)

AC_ARG_ENABLE(mt, [  --enable-mt		  Enable Multi-threading],
	      [case "$enableval" in
		   yes) MT=yes
			;;
		   *)  ;;
	       esac])

if test -z "$PLINCL"; then
plcandidates="swi-prolog swipl pl"
AC_CHECK_PROGS(PL, $plcandidates, "none")
AC_CHECK_PROGS(PLLD, plld, "none")
if test $PLLD = "none"; then
   AC_ERROR("Cannot find SWI-Prolog plld utility. SWI-Prolog must be installed first")
fi
if test $PL = "none"; then
   AC_ERROR("Cannot find SWI-Prolog. SWI-Prolog must be installed first")
else
   AC_CHECKING("Running $PL -dump-runtime-variables")
   eval `$PL -dump-runtime-variables`
fi
PLINCL=$PLBASE/include
AC_MSG_RESULT("		PLBASE=$PLBASE")
AC_MSG_RESULT("		PLARCH=$PLARCH")
AC_MSG_RESULT("		PLLIBS=$PLLIBS")
AC_MSG_RESULT("		PLLDFLAGS=$PLLDFLAGS")
AC_MSG_RESULT("		PLSHARED=$PLSHARED")
AC_MSG_RESULT("		PLSOEXT=$PLSOEXT")
if test "$PLTHREADS" = yes; then MT=yes; fi
else
PLLD=../plld.sh
PL=../pl.sh
fi

if test "$MT" = yes; then
  AC_DEFINE(_REENTRANT, 1,
	    [Define for multi-thread support])
fi

CC=$PLLD
LD=$PLLD
LDSOFLAGS=-embed-shared
CMFLAGS=-fpic
CIFLAGS=-I.

SO="$PLSOEXT"

AC_CHECK_PROGS(MAKE, gmake make, "make")
AC_CHECK_PROGS(ETAGS, etags ctags, ":")
AC_PROG_INSTALL
AC_ISC_POSIX
AC_HEADER_STDC
CFLAGS="$CMFLAGS"

dnl Note that we are using plld frontend.  Hence the -cc-options

if test ! -z "$GCC"; then
    COFLAGS="${COFLAGS--O2 -cc-options,-fno-strict-aliasing}"
    CWFLAGS="${CWFLAGS--Wall}"
else
    COFLAGS="${COFLAGS--O}"
    CWFLAGS="${CWFLAGS-}"
fi

if test "x$JAVALIBS" = "x"; then
  case "$PLARCH" in
     *darwin*)
	  JAVALIBS="-Wl,-framework,JavaVM"
	  ;;
     *powerpc-linux*)
	  JAVALIBS="-ljava -ljvm"
	  ;;
     *)
	  JAVALIBS="-ljava -lverify -ljvm"
	  ;;
  esac
fi

dnl ================================================================
dnl Java stuff
dnl ================================================================

AC_CANONICAL_HOST			dnl needed to get $host_os

m4_include([ac/ac_prog_java.m4])
m4_include([ac/ac_prog_java_works.m4])
m4_include([ac/ac_prog_javac.m4])
m4_include([ac/ac_prog_javac_works.m4])
m4_include([ac/ac_prog_javadoc.m4])
m4_include([ac/ac_jni_include_dirs.m4])
m4_include([ac/ac_prog_jar.m4])

java_abs_paths=no
AC_CHECKING(Java configuration)
if test -r /etc/java/java2.conf; then
  AC_MSG_RESULT(Using /etc/java/java2.conf)
  eval `grep '\(JAVA\|JRE\|JDK\|SDK\).*=' /etc/java/java2.conf | sed 's/ *= */=/'`
  if test ! -z "$JAVA_BINDIR"; then
    PATH="$PATH:$JAVA_BINDIR"
    java_abs_paths=yes
  fi
fi

dnl So far, JPL only works with Sun Java and IBM Java

if test "x$JAVAC" = x; then
  JAVAC=javac
fi

AC_PROG_JAVAC(javac)
AC_PROG_JAVA(java)
AC_PROG_JAR(jar)
AC_PROG_JAVADOC(javadoc)

AC_JNI_INCLUDE_DIR
for d in $JNI_INCLUDE_DIRS; do
  CIFLAGS="$CIFLAGS -I$d"
done

for d in $JNI_CLIENT_DIRS; do
  LDSOFLAGS="$LDSOFLAGS -L$d"
done

if test "$java_abs_paths" = yes; then
  JAVA_CC="$JAVA_BINDIR/$JAVA_CC"
fi

AC_ARG_WITH(junit, [  --with-junit=PATH	  Specify location of the junit JAR file],
	    [case "$withval" in
		 yes) JUNIT=/usr/share/java/junit.jar
			;;
		 no) JUNIT=""
			;;
		 *) JUNIT="$withval"
			;;
	     esac])

AC_CHECK_HEADERS(wchar.h)
AC_CHECK_SIZEOF(wchar_t, 4)
AC_CHECK_SIZEOF(void*, 4)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(long long, 8)

AC_OUTPUT(Makefile src/java/Makefile)




